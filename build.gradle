plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.11'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.sajang'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.5")  // Swagger API
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Swagger API
	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2")

	// jwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

	// MongoDB
//	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	// WebSocket & Stomp
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// rabbitMQ
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-reactor-netty:3.0.0'

	// AWS S3
//	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	implementation('org.slf4j:jcl-over-slf4j')
	implementation('ch.qos.logback:logback-classic')

	compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}

processResources.dependsOn('copySubmoduleSecret')
tasks.register('copySubmoduleSecret', Copy) {
	from './submodule-backend'  // 서브모듈 디렉토리 경로
	include "application*.properties"  // 복사할 환경변수 파일들
	into 'src/main/resources'  // 복사 위치
}

subprojects {
	bootJar {
		from('./.ebextensions') {
			into '.ebextensions'
		}
	}
}